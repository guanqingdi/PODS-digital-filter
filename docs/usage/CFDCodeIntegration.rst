
Integrating the PODFS and/or digital filter method into your CFD code
=====================================================================

The digitalfilters.py code produces both a PODFS output (in .prf or .hdf5 format) as well as the original turbulent flowfield snapshots as generated by the digital filter method (in .prf format). Therefore, you can use our software to either build turbulent inlet snapshots that must be loaded at each time step by the CFD solver or you can choose to use the much more efficient PODFS method to compress and apply this data inside your code which results in around a 2.5 times faster CFD runtime.

This guide is divided into two sections: The first deals with the output file formats while the second deals with implementing the PODFS/digital filter into various commercial, academic and industrial CFD codes.  

Output file types
#################

.vtk
****

Some files are outputed as .vtk files to allow the user to easily check the results of digitalfilters.py. These files can be viewed easily using `paraview <https://www.paraview.org>`_.


.dat
****

These files are just ASCII text files that can be opened using a standard text editor.

PODFS.dat
*********

This is the main PODFS control file, it is an ASCII file with the following format::

	2			#number of POD modes
	2.26			#the period of the fourier series is seconds (\Delta t N_s)
	1	2		#POD mode number and how many Fourier modes (N_{F_i}) for this POD mode
	2	3		#as above but for second POD mode (additional lines represent additional modes)
	1	0.10	0.07	#l(j)	Re(b_{il(j)})	Im(b_{il(j)}) (1st Fourier mode of 1st POD mode)
	-1	0.05	0.06	#as above but 2nd Fourier mode of 1st POD mode (additional lines as neccisary)
	1	0.12	0.08	#as above but 1st Fourier mode of 2nd POD mode 
	-1	0.11	0.09	#as above but 2nd Fourier mode of 2nd POD mode 
	3	0.02	0.04	#as above but 3rd Fourier mode of 2nd POD mode (additional lines as neccisary)


.prf
****

The .prf format is also an ASCII text file that can be opened with any standard text editor. Individual temporal snapshot files (use the -v option), the PODFS mean and PODFS mode file are written in this format. The file format is::

	# Header lines
	type, xyz # type of profile (rad or xyz)
	localcs,origin,0,0,0 # origin of local coordinate system
	localcs,xaxis,1,0,0 # x axis direction of local coordinate system
	localcs,yaxis,0,1,0 # y axis direction of local coordinate system
	localcs,zaxis,0,0,1 # z axis direction of local coordinate system
	tolerance, 1.00E-08 # tolerance
	scale,1,1,1,1,1,1 # scaling factors
	data,x,y,z,u,v,w # data,column 1 header, column 2 header, column 3 header, etc.
	0.000000000000,-0.500000000000,0.550000011921,-0.044854630762,-0.035683737438,-0.071052453975
	... # Each line represents a new point in the inlet plane

PODFS.hdf5
**********

The PODFS output can also be written in HDF5 format. In this case the file format is::

	main (group) --> N_POD (attribute) # number of POD modes (N_p)
		     --> period (attribute) # period of Fourier series (\Delta t N_s)
		     --> N_FC (dataset) # Number of Fourier coefficients per POD mode (N_{F_i})
		     --> FC (dataset) # Fourier coefficients (l(j),Re(b_{il(j)}),Im(b_{il(j)})
		     --> mean (dataset) # mean velocity field (x,y,z,u,v,w)
			--> Np (attribute) # number of points in inlet
			--> Nvar (attribute) # number of variables
			--> Vars (attribute) # column headers (i.e. 'x,y,z,u,v,w')
			--> SF (attribut) # scaling factors for each column
		     --> modes (group)  --> mode_???? (dataset) # POD spatial mode number ???? field (x,y,z,u,v,w)
                        		--> Np (attribute) # number of points in inlet
                        		--> Nvar (attribute) # number of variables
                        		--> Vars (attribute) # column headers (i.e. 'x,y,z,u,v,w')
                        		--> SF (attribut) # scaling factors for each column


Implementation of the PODFS/digital filter method
#################################################

General case
************

To use the snapshot files produced with the -v option, the CFD solver must load the relvent ?.?????E+??.prf file corresponding to the current time step and apply the data to the inlet.

To use the PODFS method, the solver must load the generated PODFS.dat, PODFS_mean.prf and PODFS_mode_????.prf files or the PODFS.hdf5 at the beginning of the simulation. At each timestep the solver needs to solve the PODFS equation:

.. math::

	\tilde{U}_{in}(\mathbf{x},t)=\alpha\overline{U}_{in}+\sum_{i=0}^{N_P}\mathbf{\phi}_i(\mathbf{x}_{in})\sum_{j=0}^{N_{F_i}-1}b_{il(j)}e^{2\pi\imath l(j)t/\Delta tN_S}

where :math:`\mathbf{\phi}_i(\mathbf{x})` are the POD spatial modes, :math:`l(j)` is a ranking function that ranks the Fourier modes according to the magnitude of their coefficients, :math:`b_{il(j)}` are the Fourier coefficients, :math:`N_s` is the number of snapshots, :math:`N_{F_i}` is the number of Fourier mode coefficients used for the :math:`i` th POD mode, and :math:`N_p` is the number of POD modes used in the reconstruction. :math:`\alpha` is a small correction factor that can be used to account for errors in the interpolation of the data. In the case of PODFS models built using idealised inlet conditions, :math:`\alpha` should be set to 1, however in cases where the PODFS model is generated using fluctuating inlet data from simulation or experiment, :math:`\alpha` can be used to correct the mean flow velocity or mean mass flow rateback to the value obtained in the original simulation.

If you develop a PODFS implementation for a CFD code, why not consider sharing your work? Please email us to discuss hosting your work alongside ours and help the community implment and develop the PODFS method.


PRECISE-UNS
***********

PRECISE-UNS is Rolls-Royce's combustion CFD code and is PODFS capable, please contact us to dicuss which version you should be using and how to activate the PODFS method for your inlets.

HYDRA
*****

Hydra is Rolls-Royce's compressor and turbine CFD code. A PODFS implementation is in progress, please contact us to discuss.

OpenFOAM
********

OpenFOAM is a popular open source CFD code. An implementation of the PODFS method within the OpenFOAM framework has been completed at Loughborough University, please contact us to discuss.

CFX
***

A user defined funciton for CFX has been developed at TU-Darmstadt to read in the digital filter method snapshots. Please contact us to discuss. 

